# Lodestone Artifact Registry - Base Docker Compose Configuration
# This is the base configuration that defines all services
# Use with environment-specific override files

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lodestone}
      POSTGRES_USER: ${POSTGRES_USER:-lodestone}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lodestone}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../configs/init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lodestone}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lodestone-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-lodestone}
    command: >
      sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-server --requirepass $$REDIS_PASSWORD
        else
          redis-server
        fi
      "
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - lodestone-network

  # Lodestone API Gateway
  api-gateway:
    build:
      context: ../..
      dockerfile: deploy/configs/docker/Dockerfile.api-gateway
    environment:
      # Server config
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      SERVER_READ_TIMEOUT: 30s
      SERVER_WRITE_TIMEOUT: 30s
      SERVER_IDLE_TIMEOUT: 120s
      
      # Database config
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER:-lodestone}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-lodestone}
      DB_NAME: ${POSTGRES_DB:-lodestone}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      
      # Redis config
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-lodestone}
      REDIS_DB: 0
      
      # Storage config
      STORAGE_TYPE: ${STORAGE_TYPE:-local}
      STORAGE_LOCAL_PATH: /app/artifacts
      STORAGE_S3_BUCKET: ${S3_BUCKET}
      STORAGE_S3_REGION: ${S3_REGION}
      STORAGE_S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      STORAGE_S3_SECRET_KEY: ${S3_SECRET_KEY}
      STORAGE_S3_ENDPOINT: ${S3_ENDPOINT}
      
      # Auth config
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-24h}
      BCRYPT_COST: ${BCRYPT_COST:-12}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # Security
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_RPS: ${RATE_LIMIT_RPS:-100}
      
      # Features
      REGISTRY_ENABLED_FORMATS: ${REGISTRY_ENABLED_FORMATS:-npm,nuget,maven,go,helm,cargo,rubygems,opa}
      MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE:-100MB}
      
    volumes:
      - artifacts_data:/app/artifacts
    ports:
      - "${API_PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - lodestone-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  artifacts_data:
    driver: local

networks:
  lodestone-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
