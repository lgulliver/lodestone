services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: lodestone
      POSTGRES_USER: lodestone
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lodestone"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MinIO (S3-compatible storage for development)
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Lodestone API Gateway
  api-gateway:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile.api-gateway
    environment:
      # Server config
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8080
      
      # Database config
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: lodestone
      DB_PASSWORD: password
      DB_NAME: lodestone
      DB_SSLMODE: disable
      
      # Redis config
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Storage config (using local for dev)
      STORAGE_TYPE: local
      STORAGE_LOCAL_PATH: /app/artifacts
      
      # Auth config
      JWT_SECRET: dev-secret-key-change-in-production
      JWT_EXPIRATION: 24h
      BCRYPT_COST: 12
      
      # Logging
      LOG_LEVEL: debug
      LOG_FORMAT: text
    volumes:
      - artifacts_data:/app/artifacts
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  minio_data:
  artifacts_data:
