# Production Docker Compose Override with SSL Support
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # Production database with optimized settings
  postgres:
    environment:
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --data-checksums"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Production Redis with persistence and security
  redis:
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Production API Gateway with optimized settings
  api-gateway:
    environment:
      # Production logging
      LOG_LEVEL: info
      LOG_FORMAT: json
      
      # Production database settings
      DB_SSLMODE: require
      
      # Production security
      CORS_ORIGINS: https://your-domain.com
      RATE_LIMIT_ENABLED: true
      RATE_LIMIT_RPS: 50
      
      # Performance settings
      BCRYPT_COST: 12
      
      # Enable all registry formats
      REGISTRY_ENABLED_FORMATS: npm,nuget,maven,go,helm,cargo,rubygems,opa
      
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Production Nginx with SSL support
  nginx:
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployments/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl/certs:/etc/ssl/certs:ro
      - ./ssl/private:/etc/ssl/private:ro
      - certbot_webroot:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Certbot for automatic SSL certificate management
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./ssl/certs:/etc/letsencrypt
      - ./ssl/private:/etc/letsencrypt/live
      - certbot_webroot:/var/www/certbot
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL}
    command: >
      sh -c "
        trap exit TERM;
        while :; do
          sleep 12h & wait $${!};
          certbot renew --webroot --webroot-path=/var/www/certbot --quiet
        done
      "
    profiles:
      - ssl

  # Log rotation and management
  logrotate:
    image: alpine:3.19
    volumes:
      - nginx_logs:/var/log/nginx
      - ./deployments/logrotate/nginx:/etc/logrotate.d/nginx:ro
    command: >
      sh -c "
        while true; do
          /usr/sbin/logrotate -f /etc/logrotate.d/nginx
          sleep 24h
        done
      "
    profiles:
      - logging

volumes:
  certbot_webroot:
    driver: local

networks:
  lodestone-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: lodestone-br
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
