// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/registries": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve configuration settings for all supported registry formats",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all registry settings",
                "responses": {
                    "200": {
                        "description": "Registry settings retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Admin privileges required",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve registry settings",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/admin/registries/{registry}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve configuration settings for a specific registry format",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get specific registry setting",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Registry name (e.g., npm, nuget, maven)",
                        "name": "registry",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registry setting retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Admin privileges required",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Registry not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/nuget/symbols/{id}/{version}/{filename}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Download a NuGet symbol package (.snupkg file) containing debugging symbols",
                "produces": [
                    "application/zip"
                ],
                "tags": [
                    "NuGet"
                ],
                "summary": "Download NuGet symbol package",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Package version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Symbol package filename (typically {id}.{version}.snupkg)",
                        "name": "filename",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NuGet symbol package file (.snupkg)",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad request - not a symbol package file",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Symbol package not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/nuget/v2/package": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload a new NuGet package (.nupkg file) to the registry",
                "consumes": [
                    "multipart/form-data",
                    "application/octet-stream"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NuGet"
                ],
                "summary": "Upload NuGet package",
                "parameters": [
                    {
                        "type": "file",
                        "description": "NuGet package file (.nupkg) for multipart uploads",
                        "name": "package",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Package uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid package format",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/nuget/v2/package/{id}/{version}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific version of a NuGet package from the registry",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NuGet"
                ],
                "summary": "Delete NuGet package",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Package version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Package deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - package ID and version required",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden - insufficient permissions",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Package not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/nuget/v2/symbolpackage": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload a NuGet symbol package (.snupkg file) containing debugging symbols",
                "consumes": [
                    "multipart/form-data",
                    "application/octet-stream"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NuGet"
                ],
                "summary": "Upload NuGet symbol package",
                "parameters": [
                    {
                        "type": "file",
                        "description": "NuGet symbol package file (.snupkg) for multipart uploads",
                        "name": "package",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Symbol package uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid symbol package format",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/nuget/v3-flatcontainer/{id}/index.json": {
            "get": {
                "description": "Get list of available versions for a NuGet package",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NuGet"
                ],
                "summary": "Get package versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of package versions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - package ID required",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Package not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/nuget/v3-flatcontainer/{id}/{version}/{filename}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Download a specific version of a NuGet package (.nupkg file)",
                "produces": [
                    "application/zip"
                ],
                "tags": [
                    "NuGet"
                ],
                "summary": "Download NuGet package",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Package version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Package filename (typically {id}.{version}.nupkg)",
                        "name": "filename",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "NuGet package file (.nupkg)",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad request - missing required parameters",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Package not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/nuget/v3/index.json": {
            "get": {
                "description": "Get NuGet v3 service index with API endpoints and capabilities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NuGet"
                ],
                "summary": "Get NuGet service index",
                "responses": {
                    "200": {
                        "description": "NuGet service index with resource endpoints",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/nuget/v3/registration/{id}/index.json": {
            "get": {
                "description": "Get detailed metadata and registration information for a NuGet package",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NuGet"
                ],
                "summary": "Get package metadata",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Package ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Package registration with metadata and version catalog",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - package ID required",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Package not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/nuget/v3/search": {
            "get": {
                "description": "Search for NuGet packages in the registry with optional filtering",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NuGet"
                ],
                "summary": "Search NuGet packages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query (package name or keywords)",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results to skip (default: 0)",
                        "name": "skip",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of results to return (default: 20, max: 100)",
                        "name": "take",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search results with package list",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/auth/api-keys": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all API keys for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "List user's API keys",
                "responses": {
                    "200": {
                        "description": "List of API keys",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "api_keys": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to list API keys",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generate a new API key for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Create a new API key",
                "parameters": [
                    {
                        "description": "API key creation request",
                        "name": "api_key",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "permissions": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "API key created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "api_key": {
                                    "type": "object"
                                },
                                "key": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to create API key",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/api-keys/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an API key for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Revoke an API key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "API key revoked successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid API key ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to revoke API key",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string"
                                },
                                "user": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create a new user account in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user": {
                                    "type": "object",
                                    "properties": {
                                        "email": {
                                            "type": "string"
                                        },
                                        "id": {
                                            "type": "string"
                                        },
                                        "username": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Registration failed",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/npm/{name}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve package metadata including all versions, dist-tags, and timing information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "npm"
                ],
                "summary": "Get npm package information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Package name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Package information retrieved successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "dist-tags": {
                                    "type": "object"
                                },
                                "modified": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                },
                                "time": {
                                    "type": "object"
                                },
                                "versions": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request - package name required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Package not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to get package info",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload a new npm package or new version of an existing package",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "npm"
                ],
                "summary": "Publish npm package",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Package name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "npm package data with _attachments containing base64-encoded tarball",
                        "name": "package",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Package published successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "ok": {
                                    "type": "boolean"
                                },
                                "rev": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or package data",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Upload failed",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/packages/{registry}/{package}/owners": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all owners of a specific package",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Package Ownership"
                ],
                "summary": "Get package owners",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Registry type (e.g., npm, nuget, maven)",
                        "name": "registry",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Package name",
                        "name": "package",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Package owners retrieved successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "owners": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Package not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve package owners",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v2/": {
            "get": {
                "description": "Docker Registry API v2 base endpoint - returns API version information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "OCI Registry Base Endpoint",
                "responses": {
                    "200": {
                        "description": "Registry API information",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v2/_catalog": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all repositories in the registry (catalog)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "List Repositories",
                "responses": {
                    "200": {
                        "description": "List of repositories",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/v2/auth": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Handle Docker/OCI registry authentication using Basic Auth",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Docker Registry Authentication",
                "responses": {
                    "200": {
                        "description": "Authentication successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required or failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Handle Docker/OCI registry authentication using Basic Auth",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Docker Registry Authentication",
                "responses": {
                    "200": {
                        "description": "Authentication successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required or failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v2/token": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Obtain a Bearer token for Docker/OCI registry operations (OAuth2-like flow)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Docker Registry Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name (typically registry hostname)",
                        "name": "service",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Access scope (e.g., repository:myrepo:pull,push)",
                        "name": "scope",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bearer token response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required or failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Obtain a Bearer token for Docker/OCI registry operations (OAuth2-like flow)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Docker Registry Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Service name (typically registry hostname)",
                        "name": "service",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Access scope (e.g., repository:myrepo:pull,push)",
                        "name": "scope",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bearer token response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Authentication required or failed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/v2/{name}/blobs/uploads/": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Start a new blob upload session for pushing layers or configs",
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Start Blob Upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Upload session started"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/v2/{name}/blobs/uploads/{uuid}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the status of an ongoing blob upload session",
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Get Upload Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Upload session UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Upload status retrieved"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Upload session not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Complete a blob upload session with digest verification",
                "consumes": [
                    "application/octet-stream"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Complete Blob Upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Upload session UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Expected blob digest (sha256:...)",
                        "name": "digest",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Final blob chunk data (optional)",
                        "name": "chunk",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Blob upload completed successfully"
                    },
                    "400": {
                        "description": "Bad request - digest required or invalid",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Upload session not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Cancel an ongoing blob upload session",
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Cancel Blob Upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Upload session UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Upload session cancelled"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload a chunk of data to an existing blob upload session",
                "consumes": [
                    "application/octet-stream"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Upload Blob Chunk",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Upload session UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Blob chunk data",
                        "name": "chunk",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Chunk uploaded successfully"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Upload session not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        },
        "/v2/{name}/blobs/{digest}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Download a blob (layer or config) by digest from the registry",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Download Blob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Blob digest (sha256:...)",
                        "name": "digest",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blob content",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid digest format",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Blob not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a blob from the registry",
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Delete Blob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Blob digest (sha256:...)",
                        "name": "digest",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Blob deletion accepted"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Blob not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            },
            "head": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if a blob exists in the registry (HEAD request)",
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Check Blob Existence",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Blob digest (sha256:...)",
                        "name": "digest",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Blob exists"
                    },
                    "400": {
                        "description": "Bad request - invalid digest format"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Blob not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v2/{name}/manifests/{reference}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a Docker/OCI image manifest by name and reference (tag or digest)",
                "produces": [
                    "application/vnd.docker.distribution.manifest.v2+json",
                    "application/vnd.oci.image.manifest.v1+json"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Get Image Manifest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Image reference - tag (e.g., latest, v1.0) or digest (sha256:...)",
                        "name": "reference",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image manifest",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - repository name and reference required",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Manifest not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload a Docker/OCI image manifest to the registry",
                "consumes": [
                    "application/vnd.docker.distribution.manifest.v2+json",
                    "application/vnd.oci.image.manifest.v1+json"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Push Image Manifest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Image reference - tag (e.g., latest, v1.0) or digest (sha256:...)",
                        "name": "reference",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Image manifest JSON",
                        "name": "manifest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Manifest uploaded successfully"
                    },
                    "400": {
                        "description": "Bad request - repository name and reference required",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a Docker/OCI image manifest from the registry",
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Delete Image Manifest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Image reference - tag (e.g., latest, v1.0) or digest (sha256:...)",
                        "name": "reference",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Manifest deletion accepted"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Manifest not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            },
            "head": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check if a Docker/OCI image manifest exists (HEAD request)",
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "Check Image Manifest Existence",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Image reference - tag (e.g., latest, v1.0) or digest (sha256:...)",
                        "name": "reference",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Manifest exists"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Manifest not found"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/v2/{name}/tags/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all tags for a specific repository",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OCI/Docker"
                ],
                "summary": "List Repository Tags",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Repository name (e.g., library/nginx, myorg/myapp)",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tags for the repository",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/github_com_lgulliver_lodestone_pkg_types.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_lgulliver_lodestone_pkg_types.APIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "github_com_lgulliver_lodestone_pkg_types.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_lgulliver_lodestone_pkg_types.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
